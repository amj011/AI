import numpy as np

def index_2d(myList, v):
    for i, x in enumerate(myList):
        if v in x:
            return i, x.index(v)

def possibleMoves(board, i):
    if i == 4:
        n = 4
    elif i in [0,2,6,8]:
        n = 2
    else:
        n = 3
    return n


def generateMoves(board, l, x,y ):
    res = []
    # print(board)
    while l:
        [i,j] = l[-1]
        l.pop()
        b2 = [row[:] for row in board]
        b2[x][y], b2[i][j] = b2[i][j], b2[x][y]
        res.append(b2)


    return res



def findPointer(board):
    board2 = np.reshape(board, (3, 3))
    board = board2.tolist()
    [i, j] = index_2d(board, 0)
    up = [i - 1, j]
    lp = [i + 1, j]
    rp = [i, j + 1]
    lfp = [i, j - 1]
    l = [up, lp, lfp, rp]
    # print(l)
    k =0
    while k < (len(l)):
        if not 0 <= l[k][0] <= 2 or not 0 <= l[k][1] <= 2:
            l.remove(l[k])
        k+=1
    return l

def calculateHeuristic(res):
    ideal = [[1, 2, 3], [8, 0, 4], [7, 6, 5]]
    for x in res:
        # print(x)
        print(compareBoards(ideal, x))
        print('\n')
        # h = compareBoards((ideal, x))
        # print(h)
        # x.append(h)


def compareBoards(b1, b2):
    b1 = np.reshape(b1, (3, 3))
    b2 = np.reshape(b2, (3, 3))
    # print(b1)
    print(b2)
    # print('\n')
    b1 = b1.tolist()
    b2 = b2.tolist()
    s, s2, dist, mhd = 0, 0, 0, 0
    for i in b1:
        for j in i:
            [x, y] = index_2d(b1, j)
            [a, b] = index_2d(b2, j)
            dist = max(abs(x - a), abs(y - b))
            mhd = abs(x - a) + abs(y - b)
            s += dist
            s2 += mhd
            # print(dist,s)
            # print([x, y], [a, b])
    return [s, s2]




if _name_ == '_main_':
    board = [1,5,3,6,2,4,7,0,8]
    ind = board.index(0)
    board2 = np.reshape(board, (3, 3))
    board3 = board2.tolist()
    print(board3)
    [i, j] = index_2d(board3, 0)
    print([i,j])
    print("Starting Board: ")
    print(board2)

    print('The no of possible moves are: ')
    print(possibleMoves(board, ind))
    print(findPointer(board))
    l = findPointer(board)
    # print(generateMoves(board3, l, i,j))
    res = generateMoves(board3, l, i,j)
    # print(res)
    print('The possible board positions and their heuristic values (Chebyshev, Manhattan) are: \n')
    print(calculateHeuristic(res))